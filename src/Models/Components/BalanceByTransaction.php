<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Apideck\Unify\Models\Components;

use Brick\DateTime\LocalDate;
class BalanceByTransaction
{
    /**
     * Unique identifier for the transaction.
     *
     * @var ?string $transactionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $transactionId = null;

    /**
     * Date of the transaction.
     *
     * @var ?LocalDate $transactionDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_date')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?LocalDate $transactionDate = null;

    /**
     * Type of the transaction.
     *
     * @var ?TransactionType $transactionType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_type')]
    #[\Speakeasy\Serializer\Annotation\Type('\Apideck\Unify\Models\Components\TransactionType|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionType $transactionType = null;

    /**
     * Due date of the transaction.
     *
     * @var ?LocalDate $dueDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('due_date')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?LocalDate $dueDate = null;

    /**
     * Original amount of the transaction.
     *
     * @var ?float $originalAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('original_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $originalAmount = null;

    /**
     * Outstanding balance of the transaction.
     *
     * @var ?float $outstandingBalance
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('outstanding_balance')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $outstandingBalance = null;

    /**
     * Transaction number of the transaction.
     *
     * @var ?string $transactionNumber
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_number')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $transactionNumber = null;

    /**
     * @param  ?string  $transactionId
     * @param  ?LocalDate  $transactionDate
     * @param  ?TransactionType  $transactionType
     * @param  ?LocalDate  $dueDate
     * @param  ?float  $originalAmount
     * @param  ?float  $outstandingBalance
     * @param  ?string  $transactionNumber
     */
    public function __construct(?string $transactionId = null, ?LocalDate $transactionDate = null, ?TransactionType $transactionType = null, ?LocalDate $dueDate = null, ?float $originalAmount = null, ?float $outstandingBalance = null, ?string $transactionNumber = null)
    {
        $this->transactionId = $transactionId;
        $this->transactionDate = $transactionDate;
        $this->transactionType = $transactionType;
        $this->dueDate = $dueDate;
        $this->originalAmount = $originalAmount;
        $this->outstandingBalance = $outstandingBalance;
        $this->transactionNumber = $transactionNumber;
    }
}