<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Apideck\Unify\Models\Components;


class Webhook
{
    /**
     * Name of Apideck Unified API
     *
     * @var UnifiedApiId $unifiedApi
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('unified_api')]
    #[\Speakeasy\Serializer\Annotation\Type('\Apideck\Unify\Models\Components\UnifiedApiId')]
    public UnifiedApiId $unifiedApi;

    /**
     * The status of the webhook.
     *
     * @var Status $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\Apideck\Unify\Models\Components\Status')]
    public Status $status;

    /**
     * The delivery url of the webhook endpoint.
     *
     * @var string $deliveryUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('delivery_url')]
    public string $deliveryUrl;

    /**
     * The Unify Base URL events from connectors will be sent to after service id is appended.
     *
     * @var string $executeBaseUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('execute_base_url')]
    public string $executeBaseUrl;

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     *
     * @var array<WebhookEventType> $events
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('events')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Apideck\Unify\Models\Components\WebhookEventType>')]
    public array $events;

    /**
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
     *
     * @var ?DisabledReason $disabledReason
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('disabled_reason')]
    #[\Speakeasy\Serializer\Annotation\Type('\Apideck\Unify\Models\Components\DisabledReason|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?DisabledReason $disabledReason = null;

    /**
     * A description of the object.
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     * The date and time when the object was last updated.
     *
     * @var ?\DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $updatedAt = null;

    /**
     * The date and time when the object was created.
     *
     * @var ?\DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $createdAt = null;

    /**
     * @param  UnifiedApiId  $unifiedApi
     * @param  Status  $status
     * @param  string  $deliveryUrl
     * @param  string  $executeBaseUrl
     * @param  array<WebhookEventType>  $events
     * @param  ?string  $id
     * @param  ?DisabledReason  $disabledReason
     * @param  ?string  $description
     * @param  ?\DateTime  $updatedAt
     * @param  ?\DateTime  $createdAt
     */
    public function __construct(UnifiedApiId $unifiedApi, Status $status, string $deliveryUrl, string $executeBaseUrl, array $events, ?string $id = null, ?DisabledReason $disabledReason = null, ?string $description = null, ?\DateTime $updatedAt = null, ?\DateTime $createdAt = null)
    {
        $this->unifiedApi = $unifiedApi;
        $this->status = $status;
        $this->deliveryUrl = $deliveryUrl;
        $this->executeBaseUrl = $executeBaseUrl;
        $this->events = $events;
        $this->id = $id;
        $this->disabledReason = $disabledReason;
        $this->description = $description;
        $this->updatedAt = $updatedAt;
        $this->createdAt = $createdAt;
    }
}